{"version":3,"sources":["hooks/useFetch.js","components/CardBox.js","components/CardBoxList.js","containers/App.js","serviceWorker.js","index.js"],"names":["useFetch","url","useState","data","isLoading","currentState","setCurrentState","useEffect","mounted","abortController","AbortController","state","a","fetch","signal","resp","json","console","log","abort","CardBox","cardBoxItem","source","toLowerCase","hovered","setHovered","transitionName","transitionAppear","transitionAppearTimeout","transitionEnter","transitionLeave","Card","className","Body","Title","Img","variant","src","sprites","front_default","style","width","height","transition","name","charAt","toUpperCase","slice","Spinner","animation","onMouseOut","onMouseOver","transform","CardBoxList","pokemons","marginLeft","marginRight","map","pokemon","index","key","id","App","cardGrid","setUrl","fieldValue","setFieldValue","activateSearch","setActivateSearch","disablePrevious","disableNext","results","previous","next","Jumbotron","fluid","Container","InputGroup","FormControl","size","aria-describedby","type","placeholder","value","onChange","e","target","Append","Button","onClick","disabled","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.46b41eb8.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nexport const useFetch = (url) => {\n  const [currentState, setCurrentState] = useState({\n    data: null,\n    isLoading: true,\n  });\n\n  useEffect(() => {\n    let mounted = true;\n    const abortController = new AbortController();\n\n    setCurrentState((state) => ({\n      data: state.data,\n      isLoading: true,\n    }));\n\n    // const fetchData =\n    (async () => {\n      try {\n        const resp = await fetch(url, {\n          signal: abortController.signal,\n        });\n        const data = await resp.json();\n\n        if (mounted) return setCurrentState({ data: data, isLoading: false });\n      } catch (error) {\n        console.log('Error has occurred::', error);\n      }\n    })();\n\n    // fetchData(url);\n\n    const cleanup = () => {\n      mounted = false;\n      abortController.abort();\n    };\n    return cleanup;\n    // fetchData(url);\n  }, [url]);\n\n  return currentState;\n};\n","import React, { useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Spinner from 'react-bootstrap/Spinner';\nimport './Components.css';\nimport { useFetch } from '../hooks/useFetch';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nconst CardBox = ({ source }) => {\n  let { data, isLoading } = useFetch(source.toLowerCase());\n  const [hovered, setHovered] = useState(false);\n\n  let cardBoxItem;\n\n  console.log('testing data', data);\n\n  if (!data) {\n    cardBoxItem = (\n      <CSSTransitionGroup\n        transitionName='cardbox'\n        transitionAppear={true}\n        transitionAppearTimeout={500}\n        transitionEnter={false}\n        transitionLeave={false}\n      >\n        <Card className='flexbox'>\n          <Card.Body>\n            <Card.Title>Pokemon not found</Card.Title>\n          </Card.Body>\n        </Card>\n      </CSSTransitionGroup>\n    );\n  }\n\n  if (isLoading === false) {\n    // console.log('data:::', data.name);\n\n    if (data) {\n      cardBoxItem = (\n        <CSSTransitionGroup\n          transitionName='cardbox'\n          transitionAppear={true}\n          transitionAppearTimeout={500}\n          transitionEnter={false}\n          transitionLeave={false}\n        >\n          <Card className='flexbox'>\n            <Card.Img\n              variant='top'\n              src={data.sprites.front_default}\n              style={{\n                width: '96px',\n                height: '96px',\n                transition: 'all 300ms ease-in-out 300ms',\n              }}\n            />\n            <Card.Body>\n              <Card.Title>\n                {data.name.charAt(0).toUpperCase() + data.name.slice(1)}\n              </Card.Title>\n            </Card.Body>\n          </Card>\n        </CSSTransitionGroup>\n      );\n    }\n  }\n  // else if (!data && isLoading) {\n  //   cardBoxItem = (\n  //     <CSSTransitionGroup\n  //       transitionName='cardbox'\n  //       transitionAppear={true}\n  //       transitionAppearTimeout={500}\n  //       transitionEnter={false}\n  //       transitionLeave={false}\n  //     >\n  //       <Card className='flexbox' style={{ width: '18rem' }}>\n  //         <Card.Body>\n  //           <h5>Pokémon not found.</h5>\n  //         </Card.Body>\n  //       </Card>\n  //     </CSSTransitionGroup>\n  //   );\n  // }\n  else {\n    cardBoxItem = (\n      <CSSTransitionGroup\n        transitionName='cardbox'\n        transitionAppear={true}\n        transitionAppearTimeout={500}\n        transitionEnter={false}\n        transitionLeave={false}\n      >\n        <Card className='flexbox'>\n          <div\n            style={{\n              width: '96px',\n              height: '96px',\n              transition: 'all 300ms ease-in-out 300ms',\n            }}\n            className='container-box'\n          >\n            <Spinner animation='border' variant='danger' />\n          </div>\n          <Card.Body>\n            <Card.Title>Searching for Pokémon</Card.Title>\n          </Card.Body>\n        </Card>\n      </CSSTransitionGroup>\n    );\n  }\n\n  return (\n    <div\n      onMouseOut={() => setHovered(false)}\n      onMouseOver={() => setHovered(true)}\n      style={{\n        transition: 'all 300ms ease-in-out',\n        transform: `${hovered ? 'scale(1.2,1.2)' : 'scale(1,1)'}`,\n      }}\n    >\n      {cardBoxItem}\n    </div>\n  );\n};\n\nexport default CardBox;\n","import React from 'react';\nimport CardBox from './CardBox';\nimport './Components.css';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nconst CardBoxList = ({ pokemons }) => {\n  return (\n    <div\n      className='grid-wrapper'\n      style={{ marginLeft: '10%', marginRight: '10%' }}\n    >\n      {pokemons.map((pokemon, index) => (\n        <CSSTransitionGroup\n          key={index}\n          transitionName='example'\n          transitionAppear={true}\n          transitionAppearTimeout={500}\n          transitionEnter={false}\n          transitionLeave={false}\n        >\n          <CardBox\n            className='pokemon-item'\n            key={index}\n            id={index}\n            name={pokemon.name}\n            source={pokemon.url}\n          />\n        </CSSTransitionGroup>\n      ))}\n    </div>\n  );\n};\n\nexport default CardBoxList;\n","import React, { useState } from 'react';\nimport './App.css';\nimport { useFetch } from '../hooks/useFetch';\nimport CardsList from '../components/CardBoxList';\nimport Button from 'react-bootstrap/Button';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\n\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport CardBox from '../components/CardBox';\nimport { Search } from 'react-bootstrap-icons';\n\nfunction App() {\n  const [url, setUrl] = useState('https://pokeapi.co/api/v2/pokemon/');\n  const { data, isLoading } = useFetch(url);\n  const [fieldValue, setFieldValue] = useState('');\n  const [activateSearch, setActivateSearch] = useState(false);\n\n  // console.log('Looks like rendering happens 3 times');\n\n  let cardGrid,\n    disablePrevious = false,\n    disableNext = false;\n\n  if (isLoading === false) {\n    if (fieldValue !== '') {\n      if (activateSearch) {\n        console.log('fetch pokemon');\n        cardGrid = (\n          <div className='container-box'>\n            <CardBox\n              className='pokemon-item'\n              source={'https://pokeapi.co/api/v2/pokemon/' + fieldValue}\n            />\n          </div>\n        );\n      }\n    } else {\n      cardGrid = <CardsList pokemons={data.results} />;\n    }\n\n    if (!data.previous) {\n      disablePrevious = true;\n    }\n    if (!data.next) {\n      disableNext = true;\n    }\n  }\n\n  return (\n    <div>\n      <Jumbotron fluid className='bg-success text-white'>\n        <Container>\n          <h1 className='display-2'>Pokédex</h1>\n          <p className='lead'>\n            I created this web page to practice React Hooks.\n          </p>\n        </Container>\n      </Jumbotron>\n      <div style={{ marginLeft: '10%', marginRight: '10%' }}>\n        <InputGroup className='mb-3'>\n          <FormControl\n            size='lg'\n            id='basic-url'\n            aria-describedby='basic-addon3'\n            type='search'\n            placeholder='Search a Pokémon'\n            value={fieldValue}\n            onChange={(e) => {\n              setActivateSearch(false);\n              setFieldValue(e.target.value);\n            }}\n          />\n          <InputGroup.Append>\n            <Button\n              variant='outline-primary'\n              type='submit'\n              size='lg'\n              onClick={() => setActivateSearch(true)}\n            >\n              <Search />\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      </div>\n      <div className='container-box'>\n        <Button\n          disabled={disablePrevious || fieldValue !== '' ? true : false}\n          variant='success'\n          size='lg'\n          onClick={() => setUrl(data.previous)}\n          className='flexbox'\n        >\n          Previous\n        </Button>\n\n        <Button\n          disabled={disableNext || fieldValue !== '' ? true : false}\n          variant='success'\n          size='lg'\n          onClick={() => setUrl(data.next)}\n          className='flexbox'\n        >\n          Next\n        </Button>\n      </div>\n      <br />\n\n      {cardGrid}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}