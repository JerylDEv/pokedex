{"version":3,"sources":["hooks/useFetch.js","components/CardBox.js","components/CardBoxList.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["useFetch","url","useState","data","isLoading","currentState","setCurrentState","useEffect","mounted","abortController","AbortController","state","a","fetch","signal","resp","json","abort","CardBox","cardBoxItem","name","source","hovered","setHovered","console","log","transitionName","transitionAppear","transitionAppearTimeout","transitionEnter","transitionLeave","Card","className","Img","variant","src","sprites","front_default","style","width","height","transition","Body","Title","charAt","toUpperCase","slice","Spinner","animation","onMouseOut","onMouseOver","transform","CardBoxList","pokemons","map","pokemon","index","key","id","ErrorBoundary","props","hasError","error","info","this","setState","children","Component","App","setUrl","cardGrid","disablePrevious","disableNext","results","previous","next","Jumbotron","fluid","Container","Button","disabled","size","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"kSAEaA,EAAW,SAACC,GAAS,IAAD,EACSC,mBAAS,CAC/CC,KAAM,KACNC,WAAW,IAHkB,mBACxBC,EADwB,KACVC,EADU,KAmC/B,OA7BAC,qBAAU,WACR,IAAIC,GAAU,EACRC,EAAkB,IAAIC,gBAE5BJ,GAAgB,SAACK,GAAD,MAAY,CAC1BR,KAAMQ,EAAMR,KACZC,WAAW,MAIb,sBAAC,8BAAAQ,EAAA,sEACoBC,MAAMZ,EAAK,CAC5Ba,OAAQL,EAAgBK,SAF3B,cACOC,EADP,gBAIoBA,EAAKC,OAJzB,UAIOb,EAJP,QAMKK,EANL,yCAMqBF,EAAgB,CAAEH,KAAMA,EAAMC,WAAW,KAN9D,0CAAD,GAeA,OAJgB,WACdI,GAAU,EACVC,EAAgBQ,WAIjB,CAAChB,IAEGI,G,8BCgDMa,EA9EC,SAAC,GAAsB,IAKjCC,EALaC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAAa,EACVrB,EAASqB,GAA7BlB,EAD8B,EAC9BA,KAAMC,EADwB,EACxBA,UADwB,EAENF,oBAAS,GAFH,mBAE7BoB,EAF6B,KAEpBC,EAFoB,KAgEpC,OA5DAC,QAAQC,IAAI,qBAIVN,GADgB,IAAdf,EAEA,kBAAC,qBAAD,CACEsB,eAAe,UACfC,kBAAkB,EAClBC,wBAAyB,IACzBC,iBAAiB,EACjBC,iBAAiB,GAEjB,kBAACC,EAAA,EAAD,CAAMC,UAAU,WACd,kBAACD,EAAA,EAAKE,IAAN,CACEC,QAAQ,MACRC,IAAKhC,EAAKiC,QAAQC,cAClBC,MAAO,CACLC,MAAO,OACPC,OAAQ,OACRC,WAAY,6BAGhB,kBAACV,EAAA,EAAKW,KAAN,KACE,kBAACX,EAAA,EAAKY,MAAN,KACGvB,EAAKwB,OAAO,GAAGC,cAAgBzB,EAAK0B,MAAM,OAQnD,kBAAC,qBAAD,CACEpB,eAAe,UACfC,kBAAkB,EAClBC,wBAAyB,IACzBC,iBAAiB,EACjBC,iBAAiB,GAEjB,kBAACC,EAAA,EAAD,CAAMC,UAAU,WACd,yBACEM,MAAO,CACLC,MAAO,OACPC,OAAQ,OACRC,WAAY,2BAEdT,UAAU,iBAEV,kBAACe,EAAA,EAAD,CAASC,UAAU,SAASd,QAAQ,YAEtC,kBAACH,EAAA,EAAKW,KAAN,KACE,kBAACX,EAAA,EAAKY,MAAN,KACGvB,EAAKwB,OAAO,GAAGC,cAAgBzB,EAAK0B,MAAM,OASrD,yBACEG,WAAY,kBAAM1B,GAAW,IAC7B2B,YAAa,kBAAM3B,GAAW,IAC9Be,MAAO,CACLG,WAAY,wBACZU,UAAU,GAAD,OAAK7B,EAAU,iBAAmB,gBAG5CH,ICjDQiC,EA1BK,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAErB,OACE,yBAAKrB,UAAU,gBACZqB,EAASC,KAAI,SAACC,EAASC,GAAV,OACZ,kBAAC,qBAAD,CACEC,IAAKD,EACL9B,eAAe,UACfC,kBAAkB,EAClBC,wBAAyB,IACzBC,iBAAiB,EACjBC,iBAAiB,GAEjB,kBAAC,EAAD,CACEE,UAAU,eACVyB,IAAKD,EACLE,GAAIF,EACJpC,KAAMmC,EAAQnC,KACdC,OAAQkC,EAAQtD,Y,gCCDb0D,E,kDAnBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDjD,MAAQ,CACXkD,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAA4B,IAAxBG,KAAKrD,MAAMkD,SACN,uDAEFG,KAAKJ,MAAMM,a,GAhBMC,a,wBCqEbC,MA9Df,WAAgB,IAAD,EACSlE,mBAAS,sCADlB,mBACND,EADM,KACDoE,EADC,OAEerE,EAASC,GAA7BE,EAFK,EAELA,KAAMC,EAFD,EAECA,UACdoB,QAAQC,IAAI,wCAEZ,IAAI6C,EACFC,GAAkB,EAClBC,GAAc,EAiBhB,OAfkB,IAAdpE,IACFkE,EACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAWjB,SAAUlD,EAAKsE,WAIzBtE,EAAKuE,WACRH,GAAkB,GAEfpE,EAAKwE,OACRH,GAAc,IAKhB,6BACE,kBAACI,EAAA,EAAD,CAAWC,OAAK,EAAC7C,UAAU,sBACzB,kBAAC8C,EAAA,EAAD,KACE,wBAAI9C,UAAU,aAAd,cACA,uBAAGA,UAAU,QAAb,sDAMJ,yBAAKA,UAAU,iBACb,kBAAC+C,EAAA,EAAD,CACEC,SAAUT,EACVrC,QAAQ,UACR+C,KAAK,KACLC,QAAS,kBAAMb,EAAOlE,EAAKuE,WAC3B1C,UAAU,WALZ,YAUA,kBAAC+C,EAAA,EAAD,CACEC,SAAUR,EACVtC,QAAQ,UACR+C,KAAK,KACLC,QAAS,kBAAMb,EAAOlE,EAAKwE,OAC3B3C,UAAU,WALZ,SAUF,6BACCsC,ICtDaa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLtC,QAAQsC,MAAMA,EAAMqC,c","file":"static/js/main.7de0151f.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nexport const useFetch = (url) => {\n  const [currentState, setCurrentState] = useState({\n    data: null,\n    isLoading: true,\n  });\n\n  useEffect(() => {\n    let mounted = true;\n    const abortController = new AbortController();\n\n    setCurrentState((state) => ({\n      data: state.data,\n      isLoading: true,\n    }));\n\n    // const fetchData =\n    (async () => {\n      const resp = await fetch(url, {\n        signal: abortController.signal,\n      });\n      const data = await resp.json();\n\n      if (mounted) return setCurrentState({ data: data, isLoading: false });\n    })();\n\n    // fetchData(url);\n\n    const cleanup = () => {\n      mounted = false;\n      abortController.abort();\n    };\n    return cleanup;\n    // fetchData(url);\n  }, [url]);\n\n  return currentState;\n};\n","import React, { useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Spinner from 'react-bootstrap/Spinner';\nimport './Components.css';\nimport { useFetch } from '../hooks/useFetch';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nconst CardBox = ({ name, source }) => {\n  let { data, isLoading } = useFetch(source);\n  const [hovered, setHovered] = useState(false);\n\n  console.log('cardbox rendering');\n  let cardBoxItem;\n\n  if (isLoading === false) {\n    cardBoxItem = (\n      <CSSTransitionGroup\n        transitionName='cardbox'\n        transitionAppear={true}\n        transitionAppearTimeout={500}\n        transitionEnter={false}\n        transitionLeave={false}\n      >\n        <Card className='flexbox'>\n          <Card.Img\n            variant='top'\n            src={data.sprites.front_default}\n            style={{\n              width: '96px',\n              height: '96px',\n              transition: 'all 300ms ease-in 300ms',\n            }}\n          />\n          <Card.Body>\n            <Card.Title>\n              {name.charAt(0).toUpperCase() + name.slice(1)}\n            </Card.Title>\n          </Card.Body>\n        </Card>\n      </CSSTransitionGroup>\n    );\n  } else {\n    cardBoxItem = (\n      <CSSTransitionGroup\n        transitionName='cardbox'\n        transitionAppear={true}\n        transitionAppearTimeout={500}\n        transitionEnter={false}\n        transitionLeave={false}\n      >\n        <Card className='flexbox'>\n          <div\n            style={{\n              width: '96px',\n              height: '96px',\n              transition: 'all 300ms ease-in 300ms',\n            }}\n            className='container-box'\n          >\n            <Spinner animation='border' variant='danger' />\n          </div>\n          <Card.Body>\n            <Card.Title>\n              {name.charAt(0).toUpperCase() + name.slice(1)}\n            </Card.Title>\n          </Card.Body>\n        </Card>\n      </CSSTransitionGroup>\n    );\n  }\n\n  return (\n    <div\n      onMouseOut={() => setHovered(false)}\n      onMouseOver={() => setHovered(true)}\n      style={{\n        transition: 'all 300ms ease-in-out',\n        transform: `${hovered ? 'scale(1.2,1.2)' : 'scale(1,1)'}`,\n      }}\n    >\n      {cardBoxItem}\n    </div>\n  );\n};\n\nexport default CardBox;\n","import React from 'react';\nimport CardBox from './CardBox';\nimport './Components.css';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nconst CardBoxList = ({ pokemons }) => {\n  // console.log('pokemonssssss::', pokemons);\n  return (\n    <div className='grid-wrapper'>\n      {pokemons.map((pokemon, index) => (\n        <CSSTransitionGroup\n          key={index}\n          transitionName='example'\n          transitionAppear={true}\n          transitionAppearTimeout={500}\n          transitionEnter={false}\n          transitionLeave={false}\n        >\n          <CardBox\n            className='pokemon-item'\n            key={index}\n            id={index}\n            name={pokemon.name}\n            source={pokemon.url}\n          />\n        </CSSTransitionGroup>\n      ))}\n    </div>\n  );\n};\n\nexport default CardBoxList;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError === true) {\n      return <h1>Oops. This is not good.</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { useState } from 'react';\nimport './App.css';\nimport { useFetch } from '../hooks/useFetch';\nimport CardsList from '../components/CardBoxList';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Button from 'react-bootstrap/Button';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\n\nfunction App() {\n  const [url, setUrl] = useState('https://pokeapi.co/api/v2/pokemon/');\n  const { data, isLoading } = useFetch(url);\n  console.log('Looks like rendering happens 3 times');\n\n  let cardGrid,\n    disablePrevious = false,\n    disableNext = false;\n\n  if (isLoading === false) {\n    cardGrid = (\n      <ErrorBoundary>\n        <CardsList pokemons={data.results} />\n      </ErrorBoundary>\n    );\n\n    if (!data.previous) {\n      disablePrevious = true;\n    }\n    if (!data.next) {\n      disableNext = true;\n    }\n  }\n\n  return (\n    <div>\n      <Jumbotron fluid className='bg-info text-white'>\n        <Container>\n          <h1 className='display-2'>Pok√©dex</h1>\n          <p className='lead'>\n            I created this web page to practice React Hooks.\n          </p>\n        </Container>\n      </Jumbotron>\n\n      <div className='container-box'>\n        <Button\n          disabled={disablePrevious}\n          variant='success'\n          size='lg'\n          onClick={() => setUrl(data.previous)}\n          className='flexbox'\n        >\n          Previous\n        </Button>\n\n        <Button\n          disabled={disableNext}\n          variant='success'\n          size='lg'\n          onClick={() => setUrl(data.next)}\n          className='flexbox'\n        >\n          Next\n        </Button>\n      </div>\n      <br />\n      {cardGrid}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}