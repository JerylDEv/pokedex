{"version":3,"sources":["hooks/useFetch.js","components/CardBox.js","components/CardBoxList.js","containers/App.js","serviceWorker.js","index.js"],"names":["useFetch","url","useState","data","isLoading","currentState","setCurrentState","useEffect","mounted","abortController","AbortController","state","a","fetch","signal","resp","json","console","log","abort","CardBox","cardBoxItem","source","toLowerCase","hovered","setHovered","transitionName","transitionAppear","transitionAppearTimeout","transitionEnter","transitionLeave","Card","className","Img","variant","src","sprites","front_default","style","width","height","marginTop","transition","Body","Title","name","charAt","toUpperCase","slice","Spinner","animation","onMouseOut","onMouseOver","transform","CardBoxList","pokemons","marginLeft","marginRight","map","pokemon","index","key","id","App","cardGrid","setUrl","fieldValue","setFieldValue","disablePrevious","disableNext","results","previous","next","Jumbotron","fluid","Container","href","target","rel","InputGroup","size","FormControl","aria-describedby","type","placeholder","value","onChange","e","Button","disabled","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ee85875d.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nexport const useFetch = (url) => {\n  const [currentState, setCurrentState] = useState({\n    data: null,\n    isLoading: true,\n  });\n\n  useEffect(() => {\n    let mounted = true;\n    const abortController = new AbortController();\n\n    setCurrentState((state) => ({\n      data: state.data,\n      isLoading: true,\n    }));\n\n    // const fetchData =\n    (async () => {\n      try {\n        const resp = await fetch(url, {\n          signal: abortController.signal,\n        });\n        const data = await resp.json();\n\n        if (mounted) return setCurrentState({ data: data, isLoading: false });\n      } catch (error) {\n        console.log('Pokemon not found');\n        // return setCurrentState({ data: {}, isLoading: true });\n      }\n    })();\n\n    // fetchData(url);\n\n    const cleanup = () => {\n      mounted = false;\n      abortController.abort();\n    };\n    return cleanup;\n    // fetchData(url);\n  }, [url]);\n\n  return currentState;\n};\n","import React, { useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Spinner from 'react-bootstrap/Spinner';\nimport './Components.css';\nimport { useFetch } from '../hooks/useFetch';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nconst CardBox = ({ source }) => {\n  let { data, isLoading } = useFetch(source.toLowerCase());\n  const [hovered, setHovered] = useState(false);\n\n  let cardBoxItem,\n    isSearchUsed = false;\n\n  if (isLoading === false) {\n    cardBoxItem = (\n      <CSSTransitionGroup\n        transitionName='cardbox'\n        transitionAppear={true}\n        transitionAppearTimeout={500}\n        transitionEnter={false}\n        transitionLeave={false}\n      >\n        <Card className='flexbox pokemon-item'>\n          <Card.Img\n            variant='top'\n            src={data.sprites.front_default}\n            style={{\n              width: '96px',\n              height: '96px',\n              marginTop: '1.25rem',\n              transition: 'all 300ms ease-in-out 300ms',\n            }}\n          />\n          <Card.Body>\n            <Card.Title>\n              {data.name.charAt(0).toUpperCase() + data.name.slice(1)}\n            </Card.Title>\n          </Card.Body>\n        </Card>\n      </CSSTransitionGroup>\n    );\n  } else {\n    cardBoxItem = (\n      <CSSTransitionGroup\n        transitionName='cardboxEffect'\n        transitionAppear={true}\n        transitionAppearTimeout={500}\n        transitionEnter={false}\n        transitionLeave={false}\n      >\n        <Card className='flexbox'>\n          <div\n            style={{\n              width: '96px',\n              height: '96px',\n              marginTop: '1.25rem',\n              transition: 'all 300ms ease-in-out 300ms',\n            }}\n            className='container-box'\n          >\n            <Spinner animation='border' variant='danger' />\n          </div>\n          <Card.Body>\n            <Card.Title>Searching for Pok√©mon</Card.Title>\n          </Card.Body>\n        </Card>\n      </CSSTransitionGroup>\n    );\n    // const noPokemon = () => {\n\n    //   setTimeout(() => {\n    //     cardBoxItem = (\n    //       <CSSTransitionGroup\n    //         transitionName='cardbox'\n    //         transitionAppear={true}\n    //         transitionAppearTimeout={500}\n    //         transitionEnter={false}\n    //         transitionLeave={false}\n    //       >\n    //         <Card className='flexbox'>\n    //           <Card.Body>\n    //             <Card.Title>Pokemon not found</Card.Title>\n    //           </Card.Body>\n    //         </Card>\n    //       </CSSTransitionGroup>\n    //     );\n    //   }, 5000);\n    // };\n    // noPokemon();\n  }\n\n  return (\n    <div\n      onMouseOut={() => setHovered(false)}\n      onMouseOver={() => setHovered(true)}\n      style={{\n        transition: 'all 300ms ease-in-out',\n        transform: `${hovered ? 'scale(1.2,1.2)' : 'scale(1,1)'}`,\n      }}\n    >\n      {cardBoxItem}\n    </div>\n  );\n};\n\nexport default CardBox;\n","import React from 'react';\nimport CardBox from './CardBox';\nimport './Components.css';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nconst CardBoxList = ({ pokemons }) => {\n  return (\n    <div\n      className='grid-wrapper'\n      style={{ marginLeft: '10%', marginRight: '10%' }}\n    >\n      {pokemons.map((pokemon, index) => (\n        <CSSTransitionGroup\n          key={index}\n          transitionName='example'\n          transitionAppear={true}\n          transitionAppearTimeout={500}\n          transitionEnter={false}\n          transitionLeave={false}\n        >\n          <CardBox\n            key={index}\n            id={index}\n            name={pokemon.name}\n            source={pokemon.url}\n          />\n        </CSSTransitionGroup>\n      ))}\n    </div>\n  );\n};\n\nexport default CardBoxList;\n","import React, { useState } from 'react';\nimport './App.css';\nimport { useFetch } from '../hooks/useFetch';\nimport CardsList from '../components/CardBoxList';\nimport Button from 'react-bootstrap/Button';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\n\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport CardBox from '../components/CardBox';\nimport { Search } from 'react-bootstrap-icons';\n\nfunction App() {\n  const [url, setUrl] = useState('https://pokeapi.co/api/v2/pokemon/');\n  const { data, isLoading } = useFetch(url);\n  const [fieldValue, setFieldValue] = useState('');\n\n  let cardGrid,\n    disablePrevious = false,\n    disableNext = false;\n\n  if (isLoading === false) {\n    if (fieldValue !== '') {\n      cardGrid = (\n        <div className='container-box'>\n          <CardBox\n            className='pokemon-item'\n            source={'https://pokeapi.co/api/v2/pokemon/' + fieldValue}\n          />\n        </div>\n      );\n      // }\n    } else {\n      cardGrid = <CardsList pokemons={data.results} />;\n    }\n\n    if (!data.previous) {\n      disablePrevious = true;\n    }\n    if (!data.next) {\n      disableNext = true;\n    }\n  }\n\n  return (\n    <div>\n      <Jumbotron fluid className='text-white' id='jumbotron-section'>\n        <Container>\n          <h1 className='display-1' id='jumbotron-title'>\n            Pok√©dex\n          </h1>\n          <p className='lead'>\n            I created this web page to practice React Hooks.\n          </p>\n          <p className='lead'>\n            This page is powered by{' '}\n            <a\n              href='https://pokeapi.co/'\n              className='link-reference'\n              target='_blank'\n              rel='noopener noreferrer'\n            >\n              Pok√©API\n            </a>\n          </p>\n        </Container>\n      </Jumbotron>\n      <div style={{ marginLeft: '10%', marginRight: '10%' }}>\n        <InputGroup className='mb-3' size='lg'>\n          {/* <InputGroup.Prepend>\n            <InputGroup.Text id='general-button-class'>\n              <Search />\n            </InputGroup.Text>\n          </InputGroup.Prepend> */}\n          <FormControl\n            id='basic-url'\n            aria-describedby='basic-addon3'\n            type='search'\n            placeholder='Search a Pok√©mon'\n            value={fieldValue}\n            onChange={(e) => {\n              // setActivateSearch(false);\n              setFieldValue(e.target.value);\n            }}\n          />\n          {/* <InputGroup.Append>\n            <Button\n              variant='primary'\n              type='submit'\n              size='lg'\n              id='general-button-class'\n              onClick={() => setActivateSearch(true)}\n            >\n              <Search />\n            </Button>\n          </InputGroup.Append> */}\n        </InputGroup>\n      </div>\n      <div className='container-box'>\n        <Button\n          disabled={disablePrevious || fieldValue !== '' ? true : false}\n          variant='primary'\n          size='lg'\n          id='previous-button'\n          onClick={() => setUrl(data.previous)}\n          className='flexbox'\n        >\n          Previous\n        </Button>\n\n        <Button\n          disabled={disableNext || fieldValue !== '' ? true : false}\n          variant='primary'\n          size='lg'\n          id='next-button'\n          onClick={() => setUrl(data.next)}\n          className='flexbox'\n        >\n          Next\n        </Button>\n      </div>\n      <br />\n\n      {cardGrid}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}